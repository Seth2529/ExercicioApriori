!pip install pandas
!pip install mlxtend
!pip install pandas --upgrade
!pip install mlxtend --upgrade


import pandas as pd
from mlxtend.frequent_patterns import apriori

def generate_association_rules(frequent_itemsets, min_confidence):
    rules = []
    for i, row in frequent_itemsets.iterrows():
        itemset = row['itemsets']
        support_itemset = row['support']
        
        if len(itemset) > 1:
            itemset = list(itemset)
            for antecedent_size in range(1, len(itemset)):
                from itertools import combinations
                for antecedent in combinations(itemset, antecedent_size):
                    antecedent = set(antecedent)
                    consequent = set(itemset) - antecedent
                    
                    support_antecedent = frequent_itemsets[
                        frequent_itemsets['itemsets'] == antecedent
                    ]['support'].values
                    
                    if len(support_antecedent) > 0:
                        support_antecedent = support_antecedent[0]
                        confidence = support_itemset / support_antecedent
                        if confidence >= min_confidence:
                            support_consequent = frequent_itemsets[
                                frequent_itemsets['itemsets'] == consequent
                            ]['support'].values
                            if len(support_consequent) > 0:
                                support_consequent = support_consequent[0]
                                lift = confidence / support_consequent
                                rules.append({
                                    'antecedent': antecedent,
                                    'consequent': consequent,
                                    'support': support_itemset,
                                    'confidence': confidence,
                                    'lift': lift
                                })
    return pd.DataFrame(rules)

frequent_itemsets_1 = apriori(binary_df, min_support=0.5, use_colnames=True)
rules_1 = generate_association_rules(frequent_itemsets_1, min_confidence=0.5)


print("### Cenário 1: Suporte = 50%, Confiança = 50% ###")
print("Regras:\n", rules_1)


frequent_itemsets_2 = apriori(binary_df, min_support=0.5, use_colnames=True)
rules_2 = generate_association_rules(frequent_itemsets_2, min_confidence=0.75)

print("\n\n### Cenário 2: Suporte = 50%, Confiança = 75% ###")
print("Regras:\n", rules_2)

print("\n\n### Conclusões ###")
print(f"Total de regras no Cenário 1: {len(rules_1)}")
print(f"Total de regras no Cenário 2: {len(rules_2)}")